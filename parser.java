
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 15 18:25:35 CEST 2013
//----------------------------------------------------

package tp2compile;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 15 18:25:35 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\002\000\002\003\005\000\002\003\004" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\004\006\000\002\004\003\000\002\004" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\016\003\011\006\004\012\012\014\006\017" +
    "\007\020\010\001\002\000\014\006\004\012\012\014\006" +
    "\017\007\020\010\001\002\000\020\002\037\003\011\006" +
    "\004\012\012\014\006\017\007\020\010\001\002\000\004" +
    "\020\034\001\002\000\020\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\013\ufff3\001\002\000\020\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\001" +
    "\002\000\004\004\033\001\002\000\014\006\004\012\012" +
    "\014\006\017\007\020\010\001\002\000\016\004\ufffe\005" +
    "\017\006\020\007\022\010\021\011\015\001\002\000\020" +
    "\002\uffff\003\uffff\006\uffff\012\uffff\014\uffff\017\uffff\020" +
    "\uffff\001\002\000\014\006\004\012\012\014\006\017\007" +
    "\020\010\001\002\000\004\004\027\001\002\000\014\006" +
    "\004\012\012\014\006\017\007\020\010\001\002\000\014" +
    "\006\004\012\012\014\006\017\007\020\010\001\002\000" +
    "\014\006\004\012\012\014\006\017\007\020\010\001\002" +
    "\000\014\006\004\012\012\014\006\017\007\020\010\001" +
    "\002\000\020\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\013\ufff8\001\002\000\020\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\001\002\000\020" +
    "\004\ufff9\005\ufff9\006\ufff9\007\022\010\021\011\015\013" +
    "\ufff9\001\002\000\020\004\ufffa\005\ufffa\006\ufffa\007\022" +
    "\010\021\011\015\013\ufffa\001\002\000\020\002\ufffd\003" +
    "\ufffd\006\ufffd\012\ufffd\014\ufffd\017\ufffd\020\ufffd\001\002" +
    "\000\020\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\001\002\000\016\005\017\006\020\007\022" +
    "\010\021\011\015\013\032\001\002\000\020\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\001\002" +
    "\000\020\002\ufffc\003\ufffc\006\ufffc\012\ufffc\014\ufffc\017" +
    "\ufffc\020\ufffc\001\002\000\004\015\035\001\002\000\014" +
    "\006\004\012\012\014\006\017\007\020\010\001\002\000" +
    "\020\004\ufff4\005\017\006\020\007\022\010\021\011\015" +
    "\013\ufff4\001\002\000\004\002\000\001\002\000\020\002" +
    "\001\003\001\006\001\012\001\014\001\017\001\020\001" +
    "\001\002\000\020\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\013\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\010\002\004\003\013\004\012\001\001\000" +
    "\004\004\040\001\001\000\006\003\037\004\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\030\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\004\004\027\001\001\000" +
    "\002\001\001\000\004\004\025\001\001\000\004\004\024" +
    "\001\001\000\004\004\023\001\001\000\004\004\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TestCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TestCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TestCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
		String m = "Erreur de syntaxe.";
		if (info instanceof Symbol) {
			Symbol s = ((Symbol) info);
		if (s.left >= 0) /* Num√©ro de ligne */
			m = m + " ligne : " + (s.left+1);
		}
	System.out.println(m);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TestCup$actions {

 
	static Boolean errDiv = false;
	static Boolean errDoesNotExist = false;
	static Hashtable<String, Integer> h = new Hashtable<String, Integer>();
	
	private static int getHash(String toCheck){
		if(h.get(toCheck) != null){
			return h.get(toCheck);
		}
		else{
			System.err.println("ID <" + toCheck + "> not defined yet, please declare before first use !");
			errDoesNotExist = true;
			return 0;
		} 
	}
 
  private final parser parser;

  /** Constructor */
  CUP$TestCup$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TestCup$do_action(
    int                        CUP$TestCup$act_num,
    java_cup.runtime.lr_parser CUP$TestCup$parser,
    java.util.Stack            CUP$TestCup$stack,
    int                        CUP$TestCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TestCup$result;

      /* select the action based on the action number */
      switch (CUP$TestCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= PAR_G expr PAR_D 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).value;
		 RESULT = e; 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= ENTIER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = n; 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= BEGINAFF ID SELECTAFF expr 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 h.put(s,e.intValue()); RESULT = h.get(s); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-3)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= ID 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = getHash(s); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr MOD expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 	if (e2.intValue() == 0)
	      				{ errDiv = true; RESULT = 0;}
	      			else
	      				RESULT = new Integer(e1.intValue() % e2.intValue()); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr DIVIDE expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 	if (e2.intValue() == 0)
	      				{errDiv = true; RESULT = 0;}
	      		 	else
	      		 		{RESULT = new Integer(e1.intValue() / e2.intValue()); }
	      		
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() * e2.intValue()); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() - e2.intValue()); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() + e2.intValue()); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= MINUS expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;
		 RESULT = new Integer(0 - e.intValue()); 
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= error SEMI 
            {
              Object RESULT =null;

              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)).value;

              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-2)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$TestCup$stack.peek()).value;

			if (errDiv){
				System.err.println("Dividing by ZERO is impossible\n");
				errDiv = false;
			} else if (errDoesNotExist){
				errDoesNotExist = false;
			} else {
				System.out.println("Eval = "+e.intValue());
			}
		
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)).value;
		RESULT = start_val;
              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TestCup$parser.done_parsing();
          return CUP$TestCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$TestCup$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$TestCup$stack.elementAt(CUP$TestCup$top-1)), ((java_cup.runtime.Symbol)CUP$TestCup$stack.peek()), RESULT);
            }
          return CUP$TestCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

